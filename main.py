import os
import requests
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GROUP_ID = "226396402"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –±–µ–∑ "club"
VK_API_KEY = os.environ["VK_API_KEY"]
VK_API_VERSION = "5.199"

def get_group_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å"""
    url = "https://api.vk.com/method/stats.get"
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    params = {
        "group_id": GROUP_ID,
        "date_from": yesterday,
        "date_to": yesterday,
        "access_token": VK_API_KEY,
        "v": VK_API_VERSION
    }
    try:
        response = requests.get(url, params=params).json()
        if 'error' in response:
            print(f"–û—à–∏–±–∫–∞ VK API: {response['error']['error_msg']}")
            return {}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞
        if not response.get('response') or not response['response']:
            print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return {
                'reach': 0,
                'visitors': 0,
                'views': 0,
                'likes': 0,
                'shares': 0,
                'comments': 0
            }
            
        return response['response'][0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

def get_group_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ"""
    url = "https://api.vk.com/method/groups.getById"
    params = {
        "group_ids": GROUP_ID,
        "fields": "name,description,members_count,photo_200,activity,site",
        "access_token": VK_API_KEY,
        "v": VK_API_VERSION
    }
    try:
        response = requests.get(url, params=params).json()
        if 'error' in response:
            print(f"–û—à–∏–±–∫–∞ VK API: {response['error']['error_msg']}")
            return {}
        return response["response"][0] if response.get("response") else {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
        return {}

def generate_analytics_svg(stats):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    max_val = max(
        stats.get('reach', 0),
        stats.get('visitors', 0),
        stats.get('views', 0),
        max(1, stats.get('likes', 0) * 5),  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        max(1, stats.get('shares', 0) * 10),
        max(1, stats.get('comments', 0) * 10)
    ) or 1
    
    scale = 150 / max_val  # –í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ 150px
    
    svg_content = f"""<svg width="600" height="250" xmlns="http://www.w3.org/2000/svg">
        <style>
            .bar {{ 
                fill: #58a6ff; 
                transition: height 0.5s;
            }}
            .bar:hover {{ 
                fill: #1f6feb; 
                filter: url(#glow);
            }}
            .label {{ 
                font: 12px sans-serif; 
                fill: #c9d1d9; 
            }}
            .title {{ 
                font: 16px sans-serif; 
                fill: #58a6ff; 
                font-weight: bold; 
            }}
            .axis {{ 
                stroke: #30363d; 
                stroke-width: 1; 
            }}
            .grid {{ 
                stroke: #30363d; 
                stroke-width: 0.5;
                stroke-dasharray: 2,2;
            }}
            .value {{ 
                font: 10px sans-serif; 
                fill: #8b949e; 
                text-anchor: middle;
            }}
        </style>
        
        <!-- –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ -->
        <defs>
            <filter id="glow" height="300%" width="300%" x="-75%" y="-75%">
                <feGaussianBlur stdDeviation="2.5" result="blurred"/>
                <feMerge>
                    <feMergeNode in="blurred"/>
                    <feMergeNode in="SourceGraphic"/>
                </feMerge>
            </filter>
        </defs>
        
        <rect width="100%" height="100%" fill="#0d1117" />
        
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
        <text x="300" y="30" text-anchor="middle" class="title">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</text>
        
        <!-- –°–µ—Ç–∫–∞ –∏ –æ—Å–∏ -->
        <line x1="50" y1="50" x2="50" y2="200" class="axis" />
        <line x1="50" y1="200" x2="550" y2="200" class="axis" />
        
        <!-- –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏ -->
        <line x1="50" y1="150" x2="550" y2="150" class="grid" />
        <line x1="50" y1="100" x2="550" y2="100" class="grid" />
        <line x1="50" y1="50" x2="550" y2="50" class="grid" />
        
        <!-- –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π -->
        <text x="30" y="125" text-anchor="middle" transform="rotate(-90,30,125)" class="label">–ó–Ω–∞—á–µ–Ω–∏–µ</text>
        <text x="300" y="230" text-anchor="middle" class="label">–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</text>
        
        <!-- –ë–∞—Ä-—á–∞—Ä—Ç -->
        <g transform="translate(0, 0)">
            <!-- –û—Ö–≤–∞—Ç -->
            <rect class="bar" x="70" y="{200 - stats.get('reach', 0)*scale}" width="40" height="{stats.get('reach', 0)*scale}" />
            <text class="value" x="90" y="{195 - stats.get('reach', 0)*scale}">{stats.get('reach', 0)}</text>
            <text class="label" x="90" y="220" text-anchor="middle">–û—Ö–≤–∞—Ç</text>
            
            <!-- –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ -->
            <rect class="bar" x="150" y="{200 - stats.get('visitors', 0)*scale}" width="40" height="{stats.get('visitors', 0)*scale}" />
            <text class="value" x="170" y="{195 - stats.get('visitors', 0)*scale}">{stats.get('visitors', 0)}</text>
            <text class="label" x="170" y="220" text-anchor="middle">–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏</text>
            
            <!-- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã -->
            <rect class="bar" x="230" y="{200 - stats.get('views', 0)*scale}" width="40" height="{stats.get('views', 0)*scale}" />
            <text class="value" x="250" y="{195 - stats.get('views', 0)*scale}">{stats.get('views', 0)}</text>
            <text class="label" x="250" y="220" text-anchor="middle">–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</text>
            
            <!-- –õ–∞–π–∫–∏ -->
            <rect class="bar" x="310" y="{200 - stats.get('likes', 0)*scale*5}" width="40" height="{stats.get('likes', 0)*scale*5}" />
            <text class="value" x="330" y="{195 - stats.get('likes', 0)*scale*5}">{stats.get('likes', 0)}</text>
            <text class="label" x="330" y="220" text-anchor="middle">–õ–∞–π–∫–∏</text>
            
            <!-- –†–µ–ø–æ—Å—Ç—ã -->
            <rect class="bar" x="390" y="{200 - stats.get('shares', 0)*scale*10}" width="40" height="{stats.get('shares', 0)*scale*10}" />
            <text class="value" x="410" y="{195 - stats.get('shares', 0)*scale*10}">{stats.get('shares', 0)}</text>
            <text class="label" x="410" y="220" text-anchor="middle">–†–µ–ø–æ—Å—Ç—ã</text>
            
            <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -->
            <rect class="bar" x="470" y="{200 - stats.get('comments', 0)*scale*10}" width="40" height="{stats.get('comments', 0)*scale*10}" />
            <text class="value" x="490" y="{195 - stats.get('comments', 0)*scale*10}">{stats.get('comments', 0)}</text>
            <text class="label" x="490" y="220" text-anchor="middle">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</text>
        </g>
    </svg>"""
    
    with open("analytics.svg", "w") as f:
        f.write(svg_content)

def generate_readme(info, stats):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    update_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    description = info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    description = description.replace('<br>', '\n').replace('&quot;', '"')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    members_count = info.get('members_count', 0)
    formatted_members = f"{members_count:,}".replace(',', ' ')
    
    # SVG —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    separator_svg = """
<svg width="100%" height="20" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="2" fill="#0d1117" />
  <rect y="18" width="100%" height="2" fill="#0d1117" />
  <path d="M0 10 Q 50 15, 100 10 T 200 10" stroke="#58a6ff" stroke-width="2" fill="none" />
</svg>
"""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def format_stat(value, label, color):
        return f"![{label}](https://img.shields.io/badge/{label.replace(' ', '_')}-{value}-{color}?style=flat-square&logo=github)"
    
    return f"""# üöÄ {info.get('name', 'Net Present Value')} - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

{separator_svg}

<div align="center">
  <img src="{info.get('photo_200', '')}" alt="–õ–æ–≥–æ—Ç–∏–ø —Å–æ–æ–±—â–µ—Å—Ç–≤–∞" width="200" style="border-radius: 10px; border: 2px solid #58a6ff;">
</div>

## üìå –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

> **–û–ø–∏—Å–∞–Ω–∏–µ**:  
> {description}

| –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞      | –ó–Ω–∞—á–µ–Ω–∏–µ                          |
|---------------------|-----------------------------------|
| **üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è**   | `{info.get('activity', '–§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')}` |
| **üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏**    | `{formatted_members}`             |
| **üåê –°–∞–π—Ç**         | [vk.link/netpresentvalue](https://vk.link/netpresentvalue) |

{separator_svg}

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

<div align="center">
  <img src="analytics.svg" alt="–ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" width="100%">
</div>

<div align="center" style="margin-top: 20px; margin-bottom: 20px;">

{format_stat(stats.get('reach', 0), '–û—Ö–≤–∞—Ç', 'blue')}
{format_stat(stats.get('visitors', 0), '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏', 'orange')}
{format_stat(stats.get('views', 0), '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', 'green')}

{format_stat(stats.get('likes', 0), '–õ–∞–π–∫–∏', 'red')}
{format_stat(stats.get('shares', 0), '–†–µ–ø–æ—Å—Ç—ã', 'violet')}
{format_stat(stats.get('comments', 0), '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', 'yellow')}

</div>

{separator_svg}

## ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

- **üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: {update_time}
- **üì° –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö**: VK API
- **ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è**: GitHub Actions
- **‚è±Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
- **üíæ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π**: [rucryptowhale/VK-NPV](https://github.com/rucryptowhale/VK-NPV)

<div align="center" style="margin-top: 20px;">
  <a href="https://github.com/rucryptowhale/VK-NPV">
    <img src="https://img.shields.io/badge/GitHub-Repo-brightgreen?logo=github&style=for-the-badge" alt="GitHub Repo">
  </a>
  <a href="https://vk.com/netpresentvalue">
    <img src="https://img.shields.io/badge/VK-–°–æ–æ–±—â–µ—Å—Ç–≤–æ-blue?logo=vk&style=for-the-badge" alt="VK Community">
  </a>
</div>

<div align="center" style="margin-top: 30px;">
  <img src="https://readme-typing-svg.demolab.com?font=Fira+Code&duration=3000&pause=1000&color=58A6FF&center=true&vCenter=true&width=435&lines=Powered+by+GitHub+Actions;Professional+Analytics;Data+Driven+Decisions;Made+with+‚ù§Ô∏è+by+IT+specialists" alt="Typing SVG">
</div>
"""

if __name__ == "__main__":
    group_info = get_group_info()
    group_stats = get_group_stats()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    generate_analytics_svg(group_stats)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(generate_readme(group_info, group_stats))
    
    print("README —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
